// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:1.9.0.77
//      SpecFlow Generator Version:1.9.0.0
//      Runtime Version:4.0.30319.17929
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace OpenCBS.Specflow.Test.Annuity
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "1.9.0.77")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [NUnit.Framework.TestFixtureAttribute()]
    [NUnit.Framework.DescriptionAttribute("AnnuitySample")]
    public partial class AnnuitySampleFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "AnnuitySample.feature"
#line hidden
        
        [NUnit.Framework.TestFixtureSetUpAttribute()]
        public virtual void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "AnnuitySample", "", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [NUnit.Framework.TestFixtureTearDownAttribute()]
        public virtual void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [NUnit.Framework.SetUpAttribute()]
        public virtual void TestInitialize()
        {
        }
        
        [NUnit.Framework.TearDownAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        [NUnit.Framework.TestAttribute()]
        [NUnit.Framework.DescriptionAttribute("AnnuitySample")]
        public virtual void AnnuitySample()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("AnnuitySample", ((string[])(null)));
#line 3
this.ScenarioSetup(scenarioInfo);
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Name",
                        "Value"});
            table1.AddRow(new string[] {
                        "Type",
                        "Annuity"});
            table1.AddRow(new string[] {
                        "Payments",
                        "Monthly (30 day)"});
            table1.AddRow(new string[] {
                        "Year",
                        "360"});
            table1.AddRow(new string[] {
                        "Rounding",
                        "Two decimal"});
            table1.AddRow(new string[] {
                        "Adjustment",
                        "Last installment"});
            table1.AddRow(new string[] {
                        "Date shift",
                        "Backward"});
            table1.AddRow(new string[] {
                        "Installments",
                        "4"});
            table1.AddRow(new string[] {
                        "Grace period",
                        "0"});
            table1.AddRow(new string[] {
                        "Amount",
                        "10000"});
            table1.AddRow(new string[] {
                        "Interest rate",
                        "9,96"});
            table1.AddRow(new string[] {
                        "Start on",
                        "11.05.2010"});
            table1.AddRow(new string[] {
                        "First repayment on",
                        "11.06.2010"});
#line 4
    testRunner.Given("this configuration", ((string)(null)), table1, "Given ");
#line 18
    testRunner.When("I create a schedule", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Number",
                        "Start date",
                        "End date",
                        "Repayment date",
                        "Principal",
                        "Interest",
                        "Olb"});
            table2.AddRow(new string[] {
                        "1",
                        "11.05.2010",
                        "11.06.2010",
                        "11.06.2010",
                        "2469,09",
                        "83,00",
                        "10000,00"});
            table2.AddRow(new string[] {
                        "2",
                        "11.06.2010",
                        "11.07.2010",
                        "09.07.2010",
                        "2489,58",
                        "62,51",
                        "7530,91"});
            table2.AddRow(new string[] {
                        "3",
                        "11.07.2010",
                        "11.08.2010",
                        "11.08.2010",
                        "2510,25",
                        "41,84",
                        "5041,33"});
            table2.AddRow(new string[] {
                        "4",
                        "11.08.2010",
                        "11.09.2010",
                        "10.09.2010",
                        "2531,08",
                        "21,01",
                        "2531,08"});
#line 19
    testRunner.Then("the schedule is", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion
